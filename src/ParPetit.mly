/* This ocamlyacc file was machine-generated by the BNF converter */
%{
open AbsPetit
open Lexing


%}

%token TOK_do TOK_end TOK_for TOK_suc TOK_times

%token SYMB1 /* := */
%token SYMB2 /* ; */
%token SYMB3 /* 0 */

%token TOK_EOF
%token <string> TOK_Ident
%token <string> TOK_String
%token <int> TOK_Integer
%token <float> TOK_Double
%token <char> TOK_Char

%start pStm pExp
%type <AbsPetit.stm> pStm
%type <AbsPetit.exp> pExp


%%
pStm : stm TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pExp : exp TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };


stm : ident SYMB1 exp { Ass ($1, $3) } 
  | stm SYMB2 stm { Con ($1, $3) }
  | TOK_for exp TOK_times TOK_do stm TOK_end { For ($2, $5) }
;

exp : SYMB3 { Zer  } 
  | ident { Var $1 }
  | TOK_suc exp { Suc $2 }
;


ident : TOK_Ident  { Ident $1 };


