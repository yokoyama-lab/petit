(* automatically generated by the BNF Converter *)

open Lexing

let parse (c : in_channel) : AbsPetit.stm =
    ParPetit.pStm LexPetit.token (Lexing.from_channel c)
;;

let showTree (t : AbsPetit.stm) : string =
    "[Abstract syntax]\n\n"^
    (fun x -> ShowPetit.show (ShowPetit.showStm x)) t^ "\n\n"^
    "[Linearized tree]\n\n"^ PrintPetit.printTree PrintPetit.prtStm t^
    "\n\n"^
    SkelPetit.prtStore 0 (SkelPetit.evalStm [] t)
;;

let main () =
    let channel =
        if Array.length Sys.argv > 1 then open_in Sys.argv.(1)
        else stdin
    in
    try print_string (showTree (parse channel));
        flush stdout;
        exit 0
    with BNFC_Util.Parse_error (start_pos, end_pos) ->
        Printf.printf "Parse error at %d.%d-%d.%d\n"
            start_pos.pos_lnum (start_pos.pos_cnum - start_pos.pos_bol)
            end_pos.pos_lnum (end_pos.pos_cnum - end_pos.pos_bol);
        exit 1
;;

main ();;
